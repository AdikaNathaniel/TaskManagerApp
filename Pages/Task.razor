 @page "/tasks"
@using Microsoft.EntityFrameworkCore
@using TaskManager.Data
@inject IDbContextFactory<TaskManagerAppContext> DbFactory
@using Microsoft.AspNetCore.Components
@attribute [Authorize]



<PageTitle>Task Manager App</PageTitle>

<div class="row">
    <form class="col-6">  
        <div class="input-group">
            <label class="input-group-text">Task</label>
            <input @bind="_TaskContent" class="form-control"/>
            <button type="button" @onclick="Save" class="btn btn-outline-primary">Save</button>
        </div>  
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger mt-1">@ErrorMessage</div>   
        }
    </form>    
</div>

@if (ShowConfirmDeleteOption)
{
    <div class="row mt-3">
        <div class="col-6">
            <div class="alert alert-danger">
                <p>Are you sure you want to delete this task?</p>
                <div>@_Task.Content</div>

                <div class="text-end">
                    <button @onclick="() => CancelDeletion()" class="btn btn-secondary">No</button>
                    <button @onclick="() => Delete(_Task)" class="btn btn-danger">Yes</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="row my-3">
    <div class="col-6">
        <ul class="list-group">
            @foreach (var task in Tasks)
            {
                <li class="list-group-item">
                    <button @onclick="() => ConfirmDelete(task)" class="btn btn-danger btn-sm">Delete</button>
                    <button @onclick="() => Edit(task)" class="btn btn-primary btn-sm">Edit</button>
                    <button @onclick="() => Done(task)" class="btn btn-success btn-sm">Done</button>
                    <span style="text-decoration: @(task.IsDone ? "line-through" : "none")">@task.Content</span>
                </li>
            }
        </ul>
    </div>
</div>

@*<AuthorizeView>
      <Authorized>
           <button class="btn btn-primary"> Click Me</button>
      </Authorized>

        <NotAuthorized>
              You are not Authorized
      </NotAuthorized>
      <Authorizing>
          Authorizing...
      </Authorizing>
</AuthorizeView>*@



@code {
/*
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set;}

        int currentCount = 10;
        [Parameter] public int IncrementBy { get; set;} = 1;

       public   async  Task IncrementCount()
        {
            var authState = await  authenticationState;

            var user = authState.user;

            if(user.Identity.IsAuthenticated)
            {
                currentCount += IncrementBy;
            }else{
                currentCount += IncrementBy;
            }

           
        }
       */ 
    private bool ShowConfirmDeleteOption = false;
    private string? ErrorMessage;
    private TaskManager.Task? _Task = null;
    private string? _TaskContent;
    private List<TaskManager.Task> Tasks = new List<TaskManager.Task>();

//   This also helped load task from database
 protected void Oninitialize()
{
    LoadTasks();
}


    private void Save()
    {
        if (string.IsNullOrWhiteSpace(_TaskContent))
        {
            ErrorMessage = "Task cannot be empty";
            return;
        }

        if (_Task == null)
        {
            var task = new TaskManager.Task { Content = _TaskContent };
            // This line is neccessary and ensures that when page is refreshed task is still visible
          
            using (var dbFactory = DbFactory.CreateDbContext())
            {
                dbFactory.Tasks.Add(task);
                dbFactory.SaveChanges();
            }
            LoadTasks();
        
           // Tasks.Add(task);    
        }
        else {
          //  This is neccessary code to store changes in the database
          using (var dbFactory = DbFactory.CreateDbContext())
            {
                  var task = dbFactory.Tasks.Find(_Task.Id);
                  if(task is not null)
                  {
                        task.Content = _TaskContent;
                        dbFactory.SaveChanges();
                  }
            }
               _Task.Content = _TaskContent;
                 _Task = null;
        }
        _TaskContent = string.Empty;
        ErrorMessage = string.Empty;
    }

    private void Done(TaskManager.Task task)
    {
        task.IsDone = !task.IsDone;

        // This line of code ensures that after a refresh the code is still in the database
             using(var dbFactory = DbFactory.CreateDbContext())
             {
                dbFactory.Update(task);
                dbFactory.SaveChanges();
             }
        
    }

    private void Edit(TaskManager.Task task)
    {
        ErrorMessage = string.Empty;
        _Task = task;
        _TaskContent = task.Content;
    }

    private void ConfirmDelete(TaskManager.Task task)
    {
        _Task = task;
        ShowConfirmDeleteOption = true;
    }

    private void Delete(TaskManager.Task task)
    {
         // This is necessary code to remove a task from the database and ensures that after refresh only that task is removed
       using (var dbFactory = DbFactory.CreateDbContext())
       {
               dbFactory.Tasks.Remove(task);
              dbFactory.SaveChanges();
       }


      //  Tasks.Remove(task);
     //   ShowConfirmDeleteOption = false;
     //   _Task = null;
    }

    private void CancelDeletion()
    {
        ShowConfirmDeleteOption = false;
        _Task = null;
    }

    private void LoadTasks()
    {
        using (var dbFactory = DbFactory.CreateDbContext())
        {
            Tasks = dbFactory.Tasks.ToList();
        }
    }
}

